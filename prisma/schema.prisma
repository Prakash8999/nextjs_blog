// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// model Account1 {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   compoundId         String    @unique @map(name: "compound_id")
//   userId             Int       @map(name: "user_id")
//   providerType       String    @map(name: "provider_type")
//   providerId         String    @map(name: "provider_id")
//   providerAccountId  String    @map(name: "provider_account_id")
//   refreshToken       String?   @map(name: "refresh_token")
//   accessToken        String?   @map(name: "access_token")
//   accessTokenExpires DateTime? @map(name: "access_token_expires")
//   createdAt          DateTime  @default(now()) @map(name: "created_at")
//   updatedAt          DateTime  @default(now()) @map(name: "updated_at")

//   @@index([providerAccountId], name: "providerAccountId")
//   @@index([providerId], name: "providerId")
//   @@index([userId], name: "userId")

//   @@map(name: "accounts")
// }

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  username      String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  linkedin      String?
  github        String?
  coding_skills String?
  website       String?
  bio           String?     @default("")
  Followers     Followers[]
  Following     Following[]
  PostCount     Int?
  followingIds  String[]    @db.ObjectId
  Comment       Comment[]

  @@unique([email, id])
}

model Followers {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  follower   User?   @relation(fields: [followerID], references: [id])
  followerID String? @db.ObjectId

  @@index([followerID], name: "followers_userId_index")
}

model Following {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  following   User?   @relation(fields: [followingId], references: [id])
  followingId String? @db.ObjectId

  @@index([followingId], name: "following_userId_index")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  content Json?
  // author User    @relation(fields: [authorEmail, authorId], references: [email, id])

  // authorEmail
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String    @db.ObjectId
  coverPhoto String?
  summary    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  publish    Boolean?  @default(true)
  draft      Boolean?  @default(false)
  tags       String?
  likedIds   String[]  @db.ObjectId
  category   String?
  Comment    Comment[]
}

model Comment {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  body             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  author           User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId         String   @db.ObjectId
  postId           String   @db.ObjectId
  commentUsername  String?
  commentUserPhoto String?
  post             Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}
